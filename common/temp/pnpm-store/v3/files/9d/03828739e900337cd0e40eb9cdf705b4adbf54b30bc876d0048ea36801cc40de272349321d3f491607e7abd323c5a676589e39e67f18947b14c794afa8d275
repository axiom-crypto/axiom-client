"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resizeArray = exports.fillArray = exports.deepCopyObject = exports.sortByHex = exports.sortByNumber = exports.deepSort = exports.sortSlot = exports.sortAddress = exports.sortBlockNumber = exports.concatHexStrings = void 0;
function concatHexStrings(...args) {
    return `0x${args.map((s) => {
        if (s.substring(0, 2) === '0x') {
            return s.substring(2, s.length);
        }
        else {
            return s;
        }
    }).join('')}`;
}
exports.concatHexStrings = concatHexStrings;
function sortBlockNumber(a, b) {
    return a - b;
}
exports.sortBlockNumber = sortBlockNumber;
;
function sortAddress(a, b) {
    if (a === undefined && b === undefined) {
        return 0;
    }
    else if (a === undefined) {
        return -1;
    }
    else if (b === undefined) {
        return 1;
    }
    return parseInt(a, 16) - parseInt(b, 16);
}
exports.sortAddress = sortAddress;
;
function sortSlot(a, b) {
    if (a === undefined && b === undefined) {
        return 0;
    }
    else if (a === undefined) {
        return -1;
    }
    else if (b === undefined) {
        return 1;
    }
    return parseInt(a.toString(), 16) - parseInt(b.toString(), 16);
}
exports.sortSlot = sortSlot;
;
function deepSort(arr, keys, sortFns) {
    return arr.sort((a, b) => {
        let result = 0;
        for (let i = 0; i < keys.length; i++) {
            result = sortFns[i](a[keys[i]], b[keys[i]]);
            if (result !== 0) {
                return result;
            }
        }
        return result;
    });
}
exports.deepSort = deepSort;
function sortByNumber(a, b) {
    return a - b;
}
exports.sortByNumber = sortByNumber;
function sortByHex(a, b) {
    return parseInt(a, 16) - parseInt(b, 16);
}
exports.sortByHex = sortByHex;
// Deep copy any object with nested objects. Will not deep copy functions inside the object.
function deepCopyObject(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.deepCopyObject = deepCopyObject;
function fillArray(length, value) {
    return Array(length).fill(value);
}
exports.fillArray = fillArray;
function resizeArray(arr, size, defaultValue) {
    if (arr.length < size) {
        return arr.concat(Array(size - arr.length).fill(defaultValue));
    }
    return arr.slice(0, size);
}
exports.resizeArray = resizeArray;
;
//# sourceMappingURL=utils.js.map