"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuiltSubqueryTypeFromKeys = exports.getUnbuiltSubqueryTypeFromKeys = void 0;
const tools_1 = require("@axiom-crypto/tools");
function getUnbuiltSubqueryTypeFromKeys(keys) {
    switch (keys.join(",")) {
        case ["blockNumber", "fieldIdx"].join(","):
            return tools_1.DataSubqueryType.Header;
        case ["blockNumber", "addr", "fieldIdx"].join(","):
            return tools_1.DataSubqueryType.Account;
        case ["blockNumber", "addr", "slot"].join(","):
            return tools_1.DataSubqueryType.Storage;
        case ["txHash", "fieldOrCalldataIdx"].join(","):
            return tools_1.DataSubqueryType.Transaction;
        case ["txHash", "fieldOrLogIdx", "topicOrDataOrAddressIdx", "eventSchema"].join(","):
            return tools_1.DataSubqueryType.Receipt;
        case ["blockNumber", "addr", "mappingSlot", "mappingDepth", "keys"].join(","):
            return tools_1.DataSubqueryType.SolidityNestedMapping;
        default:
            throw new Error(`Could not infer subquery type from keys ${keys}`);
    }
}
exports.getUnbuiltSubqueryTypeFromKeys = getUnbuiltSubqueryTypeFromKeys;
function getBuiltSubqueryTypeFromKeys(keys) {
    switch (keys.join(",")) {
        case ["blockNumber", "fieldIdx"].join(","):
            return tools_1.DataSubqueryType.Header;
        case ["blockNumber", "addr", "fieldIdx"].join(","):
            return tools_1.DataSubqueryType.Account;
        case ["blockNumber", "addr", "slot"].join(","):
            return tools_1.DataSubqueryType.Storage;
        case ["blockNumber", "txIdx", "fieldOrCalldataIdx"].join(","):
            return tools_1.DataSubqueryType.Transaction;
        case ["blockNumber", "txIdx", "fieldOrLogIdx", "topicOrDataOrAddressIdx", "eventSchema"].join(","):
            return tools_1.DataSubqueryType.Receipt;
        case ["blockNumber", "addr", "mappingSlot", "mappingDepth", "keys"].join(","):
            return tools_1.DataSubqueryType.SolidityNestedMapping;
        default:
            throw new Error(`Could not infer subquery type from keys ${keys}`);
    }
}
exports.getBuiltSubqueryTypeFromKeys = getBuiltSubqueryTypeFromKeys;
//# sourceMappingURL=utils.js.map