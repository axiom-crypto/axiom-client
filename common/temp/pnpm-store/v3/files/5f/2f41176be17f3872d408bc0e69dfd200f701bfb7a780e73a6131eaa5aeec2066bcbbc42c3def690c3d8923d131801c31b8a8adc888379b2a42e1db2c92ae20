"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstantsV2 = exports.ReceiptSizeCategory = exports.TxSizeCategory = exports.SubqueryConfig = void 0;
const ethers_1 = require("ethers");
var SubqueryConfig;
(function (SubqueryConfig) {
    SubqueryConfig[SubqueryConfig["Default"] = 0] = "Default";
    SubqueryConfig[SubqueryConfig["AllLarge"] = 1] = "AllLarge";
    SubqueryConfig[SubqueryConfig["AllMax"] = 2] = "AllMax";
})(SubqueryConfig || (exports.SubqueryConfig = SubqueryConfig = {}));
var TxSizeCategory;
(function (TxSizeCategory) {
    TxSizeCategory[TxSizeCategory["Default"] = 0] = "Default";
    TxSizeCategory[TxSizeCategory["Large"] = 1] = "Large";
    TxSizeCategory[TxSizeCategory["Max"] = 2] = "Max";
})(TxSizeCategory || (exports.TxSizeCategory = TxSizeCategory = {}));
var ReceiptSizeCategory;
(function (ReceiptSizeCategory) {
    ReceiptSizeCategory[ReceiptSizeCategory["Default"] = 0] = "Default";
    ReceiptSizeCategory[ReceiptSizeCategory["Medium"] = 1] = "Medium";
    ReceiptSizeCategory[ReceiptSizeCategory["Large"] = 2] = "Large";
    ReceiptSizeCategory[ReceiptSizeCategory["Max"] = 3] = "Max";
})(ReceiptSizeCategory || (exports.ReceiptSizeCategory = ReceiptSizeCategory = {}));
exports.ConstantsV2 = Object.freeze({
    // Default values for options
    DefaultMaxFeePerGasWei: "25000000000",
    DefaultCallbackGasLimit: 100000,
    DefaultOverrideAxiomQueryFee: "0",
    // Fallback values if contract value cannot be read
    FallbackProofVerificationGas: 420000n,
    FallbackAxiomQueryFeeWei: 3000000000000000n,
    // Schema hashes
    QueryInitiatedOnchainSchema: "0xb72b05c090ac4ae9ec18b7e708d597093716f98567026726f6f5d9f172316178",
    QueryInitiatedWithIpfsDataSchema: "0xf3a2958f23705cbc6bbc0922c0af3c82b76d93e8acc5c17ef86736cf4563fb85",
    // Subquery limits
    UserMaxTotalSubqueries: 128,
    MaxSameSubqueryType: 128,
    SubqueryConfigs: {
        [SubqueryConfig.Default]: {
            MaxTxSubqueries: 128,
            MaxReceiptSubqueries: 128,
        },
        [SubqueryConfig.AllLarge]: {
            MaxTxSubqueries: 16,
            MaxReceiptSubqueries: 16,
        },
        [SubqueryConfig.AllMax]: {
            MaxTxSubqueries: 4,
            MaxReceiptSubqueries: 1,
        },
    },
    // Tx categorization
    TxSizeCategory: {
        Default: {
            MaxDataLen: 8192,
            MaxAccessListRlpLen: 4096,
        },
        Large: {
            MaxDataLen: 32768,
            MaxAccessListRlpLen: 16384,
        },
        Max: {
            MaxDataLen: 330000,
            MaxAccessListRlpLen: 131072,
        },
    },
    // Receipt categorization
    ReceiptSizeCategory: {
        Default: {
            MaxLogDataLen: 800,
            MaxNumLogs: 20,
        },
        Medium: {
            MaxLogDataLen: 1024,
            MaxNumLogs: 80,
        },
        Large: {
            MaxLogDataLen: 2048,
            MaxNumLogs: 80,
        },
        Max: {
            MaxLogDataLen: 1024,
            MaxNumLogs: 400,
        },
    },
    // Default empty objects
    EmptyComputeQueryObject: {
        k: 0,
        resultLen: 0,
        vkey: [],
        computeProof: "0x00",
    },
    EmptyCallbackObject: {
        target: ethers_1.ethers.ZeroAddress,
        extraData: ethers_1.ethers.ZeroHash,
    },
    EmptyDataSubqueryCount: {
        total: 0,
        header: 0,
        account: 0,
        storage: 0,
        transaction: 0,
        receipt: 0,
        solidityNestedMapping: 0,
    },
    // Various constants
    Bytes32Max: "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
});
//# sourceMappingURL=constants.js.map