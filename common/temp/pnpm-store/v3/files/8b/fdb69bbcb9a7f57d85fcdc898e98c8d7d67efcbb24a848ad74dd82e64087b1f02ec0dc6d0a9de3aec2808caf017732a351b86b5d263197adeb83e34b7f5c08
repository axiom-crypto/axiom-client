"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConstants = exports.ContractEvents = exports.Versions = exports.SharedConstants = void 0;
exports.SharedConstants = Object.freeze({
    EIP2930_BLOCK: 12244000,
    EIP1559_BLOCK: 12965000,
});
exports.Versions = ["v2"];
exports.ContractEvents = Object.freeze({
    QueryInitiatedOnchain: "QueryInitiatedOnchain",
    QueryFulfilled: "QueryFulfilled",
});
/// Update constants using the same nested object structure as the versionData variable.
/// Pass the updateObject in as an override when initializing Axiom.
function updateConstants(versionData, version, updateObject) {
    const versionUpdateObject = {
        [version]: updateObject,
    };
    return updateConstantsRecursive({ ...versionData }, versionUpdateObject);
}
exports.updateConstants = updateConstants;
function updateConstantsRecursive(versionMem, updateMem) {
    const keys = Object.keys(updateMem);
    for (const key of keys) {
        if (versionMem[key] === undefined) {
            console.log("versionData does not have key", key);
            continue;
        }
        if (typeof updateMem[key] !== "object") {
            versionMem[key] = updateMem[key];
            continue;
        }
        updateConstantsRecursive(versionMem[key], updateMem[key]);
    }
    return versionMem;
}
//# sourceMappingURL=constants.js.map