"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makePublic = exports.log = exports.value = exports.poseidon = exports.pow = exports.mod = exports.div = exports.isLessThan = exports.checkLessThan = exports.rangeCheck = exports.checkEqual = exports.numToBits = exports.isEqual = exports.isZero = exports.selectFromIdx = exports.selectByIndicator = exports.idxToIndicator = exports.bitsToIndicator = exports.orAnd = exports.select = exports.dec = exports.not = exports.or = exports.and = exports.sum = exports.innerProduct = exports.assertIsConst = exports.assertBit = exports.mulNot = exports.mulAdd = exports.mul = exports.neg = exports.sub = exports.add = exports.constant = exports.witness = exports.Cell = void 0;
const utils_1 = require("../shared/utils");
const CircuitValue_1 = require("./CircuitValue");
const CircuitValue256_1 = require("./CircuitValue256");
const Cell = (a) => new CircuitValue_1.CircuitValue({ cell: a });
exports.Cell = Cell;
const getMaxPaddedNumBits = () => {
    const lookupBits = globalThis.circuit.halo2lib.lookup_bits();
    let maxPaddedNumBits = Math.floor(253 / lookupBits) * lookupBits - 1;
    return maxPaddedNumBits.toString();
};
const getValidatedNumBits = (numBits) => {
    const maxBits = getMaxPaddedNumBits();
    if (Number(numBits) > Number(maxBits))
        throw new Error(`Number of bits must be less than ${maxBits}`);
    return numBits;
};
const convertCircuitInput = (a) => {
    if (a instanceof CircuitValue_1.CircuitValue) {
        return a.cell();
    }
    else {
        return constant(a).cell();
    }
};
/**
     * Creates a circuit variable from a number, bigint, or string.
     *
     * @param a - The raw circuit input.
     * @returns The witness cell.
     */
const witness = (a) => (0, exports.Cell)(globalThis.circuit.halo2lib.witness((0, utils_1.convertRawInput)(a)));
exports.witness = witness;
/**
 * Creates a circuit constant from a number, bigint, or string.
 *
 * @param a - The raw circuit input.
 * @returns The constant cell.
 */
const constant = (a) => (0, exports.Cell)(globalThis.circuit.halo2lib.constant((0, utils_1.convertRawInput)(a)));
exports.constant = constant;
/**
 * Adds two circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The sum of the two circuit values.
 */
const add = (a, b) => {
    return (0, exports.Cell)(globalThis.circuit.halo2lib.add(convertCircuitInput(a), convertCircuitInput(b)));
};
exports.add = add;
/**
 * Subtracts the second circuit value from the first circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The difference between the two circuit values.
 */
const sub = (a, b) => {
    return (0, exports.Cell)(globalThis.circuit.halo2lib.sub(convertCircuitInput(a), convertCircuitInput(b)));
};
exports.sub = sub;
/**
 * Negates a circuit value.
 *
 * @param a - The circuit value to negate.
 * @returns The negation of the circuit value.
 */
const neg = (a) => {
    (0, exports.Cell)(globalThis.circuit.halo2lib.neg(convertCircuitInput(a)));
};
exports.neg = neg;
/**
 * Multiplies two circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The product of the two circuit values.
 */
const mul = (a, b) => {
    return (0, exports.Cell)(globalThis.circuit.halo2lib.mul(convertCircuitInput(a), convertCircuitInput(b)));
};
exports.mul = mul;
/**
 * Multiplies two circuit values and adds a third circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @param c - The third circuit value.
 * @returns The result of multiplying the first two circuit values and adding the third circuit value.
 */
const mulAdd = (a, b, c) => {
    return (0, exports.Cell)(globalThis.circuit.halo2lib.mul_add(convertCircuitInput(a), convertCircuitInput(b), convertCircuitInput(c)));
};
exports.mulAdd = mulAdd;
/**
 * Multiplies a circuit value by the negation of another circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The result of multiplying the first circuit value by the negation of the second circuit value.
 */
const mulNot = (a, b) => {
    return (0, exports.Cell)(globalThis.circuit.halo2lib.mul_not(convertCircuitInput(a), convertCircuitInput(b)));
};
exports.mulNot = mulNot;
/**
 * Asserts that a circuit value is a bit.
 *
 * @param a - The circuit value to assert.
 */
const assertBit = (a) => globalThis.circuit.halo2lib.assert_bit(convertCircuitInput(a));
exports.assertBit = assertBit;
/**
 * Asserts that a circuit value is a constant.
 *
 * @param a - The circuit value to assert.
 * @param b - The raw circuit input.
 */
const assertIsConst = (a, b) => globalThis.circuit.halo2lib.assert_is_const(convertCircuitInput(a), (0, utils_1.convertRawInput)(b));
exports.assertIsConst = assertIsConst;
/**
 * Computes the inner product of two arrays of circuit values.
 *
 * @param a - The first array of circuit values.
 * @param b - The second array of circuit values.
 * @returns The inner product of the two arrays.
 */
const innerProduct = (a, b) => (0, exports.Cell)(globalThis.circuit.halo2lib.inner_product(new Uint32Array(a.map(a => convertCircuitInput(a))), new Uint32Array(b.map(b => convertCircuitInput(b)))));
exports.innerProduct = innerProduct;
/**
 * Computes the sum of an array of circuit values.
 *
 * @param arr - The array of circuit values.
 * @returns The sum of the array of circuit values.
 */
const sum = (arr) => (0, exports.Cell)(globalThis.circuit.halo2lib.sum(new Uint32Array(arr.map(a => convertCircuitInput(a)))));
exports.sum = sum;
/**
 * Performs a bitwise AND operation on two circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The result of the bitwise AND operation.
 */
const and = (a, b) => (0, exports.Cell)(globalThis.circuit.halo2lib.and(convertCircuitInput(a), convertCircuitInput(b)));
exports.and = and;
/**
 * Performs a bitwise OR operation on two circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The result of the bitwise OR operation.
 */
const or = (a, b) => (0, exports.Cell)(globalThis.circuit.halo2lib.or(convertCircuitInput(a), convertCircuitInput(b)));
exports.or = or;
/**
 * Performs a bitwise NOT operation on a circuit value.
 *
 * @param a - The circuit value.
 * @returns The result of the bitwise NOT operation.
 */
const not = (a) => (0, exports.Cell)(globalThis.circuit.halo2lib.not(convertCircuitInput(a)));
exports.not = not;
/**
 * Decrements a circuit value by 1.
 *
 * @param a - The circuit value.
 * @returns The decremented circuit value.
 */
const dec = (a) => (0, exports.Cell)(globalThis.circuit.halo2lib.dec(convertCircuitInput(a)));
exports.dec = dec;
/**
 * Selects a circuit value based on a condition.
 *
 * @param a - The condition circuit value.
 * @param b - The first circuit value.
 * @param c - The second circuit value.
 * @returns The selected circuit value.
 */
const select = (a, b, c) => (0, exports.Cell)(globalThis.circuit.halo2lib.select(convertCircuitInput(a), convertCircuitInput(b), convertCircuitInput(c)));
exports.select = select;
/**
 * Performs a bitwise OR-AND operation on three circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @param c - The third circuit value.
 * @returns The result of the OR-AND operation.
 */
const orAnd = (a, b, c) => (0, exports.Cell)(globalThis.circuit.halo2lib.or_and(convertCircuitInput(a), convertCircuitInput(b), convertCircuitInput(c)));
exports.orAnd = orAnd;
/**
 * Converts an array of circuit values to an indicator array.
 *
 * @param bits - The array of circuit values.
 * @returns The indicator circuit value.
 */
const bitsToIndicator = (bits) => {
    const indicator = globalThis.circuit.halo2lib.bits_to_indicator(new Uint32Array(bits.map(b => convertCircuitInput(b))));
    return [...indicator].map((a) => (0, exports.Cell)(a));
};
exports.bitsToIndicator = bitsToIndicator;
/**
 * Converts an index circuit value to an indicator circuit value.
 *
 * @param idx - The index circuit value.
 * @param len - The length of the indicator circuit value.
 * @returns The indicator circuit value.
 */
const idxToIndicator = (idx, len) => {
    const indicator = globalThis.circuit.halo2lib.idx_to_indicator(convertCircuitInput(idx), (0, utils_1.convertRawInput)(len));
    return [...indicator].map((a) => (0, exports.Cell)(a));
};
exports.idxToIndicator = idxToIndicator;
/**
 * Selects circuit values from an array based on an indicator circuit value.
 *
 * @param arr - The array of circuit values.
 * @param indicator - The indicator circuit value.
 * @returns The selected circuit values.
 */
const selectByIndicator = (arr, indicator) => (0, exports.Cell)(globalThis.circuit.halo2lib.select_by_indicator(new Uint32Array(arr.map(a => convertCircuitInput(a))), new Uint32Array(indicator.map(a => convertCircuitInput(a)))));
exports.selectByIndicator = selectByIndicator;
/**
 * Selects a circuit value from an array based on an index circuit value.
 *
 * @param arr - The array of circuit values.
 * @param idx - The index circuit value.
 * @returns The selected circuit value.
 */
const selectFromIdx = (arr, idx) => (0, exports.Cell)(globalThis.circuit.halo2lib.select_from_idx(new Uint32Array(arr.map(a => convertCircuitInput(a))), convertCircuitInput(idx)));
exports.selectFromIdx = selectFromIdx;
/**
 * Checks if a circuit value is zero.
 *
 * @param a - The circuit value to check.
 * @returns The indicator circuit value representing whether the input is zero.
 */
const isZero = (a) => (0, exports.Cell)(globalThis.circuit.halo2lib.is_zero(convertCircuitInput(a)));
exports.isZero = isZero;
/**
 * Checks if two circuit values are equal.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The indicator circuit value representing whether the two inputs are equal.
 */
const isEqual = (a, b) => (0, exports.Cell)(globalThis.circuit.halo2lib.is_equal(convertCircuitInput(a), convertCircuitInput(b)));
exports.isEqual = isEqual;
/**
 * Converts a circuit value to an array of bits.
 *
 * @param a - The circuit value to convert.
 * @param len - The length of the resulting bit array.
 * @returns The array of bits representing the input circuit value.
 */
const numToBits = (a, len) => {
    const bits = globalThis.circuit.halo2lib.num_to_bits(convertCircuitInput(a), (0, utils_1.convertRawInput)(len));
    const circuitValues = [...bits].map((a) => (0, exports.Cell)(a));
    return circuitValues;
};
exports.numToBits = numToBits;
/**
 * Asserts that two circuit values are equal.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 */
const checkEqual = (a, b) => globalThis.circuit.halo2lib.constrain_equal(convertCircuitInput(a), convertCircuitInput(b));
exports.checkEqual = checkEqual;
/**
 * Checks if a circuit value is within a specified range.
 *
 * @param a - The circuit value to check.
 * @param b - The range of the circuit value.
 */
const rangeCheck = (a, b) => globalThis.circuit.halo2lib.range_check(convertCircuitInput(a), (0, utils_1.convertRawInput)(b));
exports.rangeCheck = rangeCheck;
/**
 * Checks if the first circuit value is less than the second circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @param c - The range of the circuit values.
 */
const checkLessThan = (a, b, c) => {
    if (c === undefined)
        c = getMaxPaddedNumBits();
    rangeCheck(a, (0, utils_1.convertRawInput)(c));
    rangeCheck(b, (0, utils_1.convertRawInput)(c));
    globalThis.circuit.halo2lib.check_less_than(convertCircuitInput(a), convertCircuitInput(b), getValidatedNumBits(c));
};
exports.checkLessThan = checkLessThan;
/**
 * Checks if the first circuit value is less than the second circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @param c - The range of the circuit values.
 * @returns The indicator circuit value representing whether the first input is less than the second input.
 */
const isLessThan = (a, b, c) => {
    if (c === undefined)
        c = getMaxPaddedNumBits();
    rangeCheck(a, (0, utils_1.convertRawInput)(c));
    rangeCheck(b, (0, utils_1.convertRawInput)(c));
    return (0, exports.Cell)(globalThis.circuit.halo2lib.is_less_than(convertCircuitInput(a), convertCircuitInput(b), getValidatedNumBits(c)));
};
exports.isLessThan = isLessThan;
/**
 * Divides two circuit values and returns the quotient.
 *
 * @param a - The dividend circuit value.
 * @param b - The divisor circuit value.
 * @returns The quotient.
 *
 */
const div = (a, b, c, d) => {
    //TODO: if ConstantValue, set c/d to right number of bits
    if (c === undefined)
        c = getMaxPaddedNumBits();
    if (d === undefined)
        d = getMaxPaddedNumBits();
    const res = globalThis.circuit.halo2lib.div_mod_var(convertCircuitInput(a), convertCircuitInput(b), c, d);
    return (0, exports.Cell)(res[0]);
};
exports.div = div;
/**
 * Divides two circuit values and returns the remainder.
 *
 * @param a - The dividend circuit value.
 * @param b - The divisor circuit value.
 * @returns The remainder.
 *
 */
const mod = (a, b, c, d) => {
    if (c === undefined)
        c = getMaxPaddedNumBits();
    if (d === undefined)
        d = getMaxPaddedNumBits();
    const [_, remainder] = globalThis.circuit.halo2lib.div_mod_var(convertCircuitInput(a), convertCircuitInput(b), c, d);
    return (0, exports.Cell)(remainder);
};
exports.mod = mod;
/**
 * Raises a circuit value to the power of another circuit value.
 *
 * @param a - The base circuit value.
 * @param b - The exponent circuit value.
 * @returns The result of the exponentiation.
 */
const pow = (a, b, c) => {
    if (c === undefined)
        c = getMaxPaddedNumBits();
    const result = globalThis.circuit.halo2lib.pow_var(convertCircuitInput(a), convertCircuitInput(b), c);
    return (0, exports.Cell)(result);
};
exports.pow = pow;
/**
 * Computes the Poseidon hash of multiple circuit values.
 *
 * @param args - The circuit values to hash.
 * @returns The hash value.
 */
const poseidon = (...args) => (0, exports.Cell)(globalThis.circuit.halo2lib.poseidon(new Uint32Array((0, utils_1.joinArrays)(...args.map(a => convertCircuitInput(a))))));
exports.poseidon = poseidon;
/**
 * Retrieves the value of a circuit value.
 *
 * @param a - The circuit value.
 * @returns The value of the circuit value.
 */
const value = (a) => globalThis.circuit.halo2lib.value(convertCircuitInput(a));
exports.value = value;
/**
 * Logs the provided *circuit* values to the console. Use `console.log` for normal logging.
 *
 * @param args - The values to log (can be `CircuitValue`s or `CircuitValue256`s).
 */
const log = (...args) => {
    if (globalThis.circuit.silent)
        return;
    let arr = (0, utils_1.joinArrays)(...args).map(a => "0x" + a.value().toString(16));
    if (arr.length === 1) {
        console.log(arr[0]);
    }
    else {
        console.log(arr);
    }
};
exports.log = log;
/**
 * Makes a circuit value public.
 *
 * @param a - The circuit value to make public.
 */
const makePublic = (a) => globalThis.circuit.halo2lib.make_public(globalThis.circuit.halo2wasm, convertCircuitInput(a), 0);
exports.makePublic = makePublic;
/**
 * Creates new `CircuitValue256` and range checks `hi, lo` to be `uint128`s.
 * @param hi
 * @param lo
 * @returns
 */
const newCircuitValue256 = (hi, lo) => {
    rangeCheck(hi, 128);
    rangeCheck(lo, 128);
    return new CircuitValue256_1.CircuitValue256({ hi, lo });
};
