import { ethers } from "ethers";
import { AxiomSdkCoreConfig } from "../shared/types";
export declare class InternalConfig {
    /**
     * Axiom API key
     */
    readonly apiKey: string;
    /**
     * https URL for provider
     */
    readonly providerUri: string;
    readonly targetProviderUri: string;
    /**
     * The Chain ID to use for the Axiom SDK
     */
    readonly chainId: BigInt;
    readonly targetChainId: BigInt;
    /**
     * Axiom contract version number to use
     */
    readonly version: string;
    /**
     * Default timeout for Axiom API calls
     */
    readonly timeoutMs: number;
    /**
     * Sets usage of mock prover and database for testing
     */
    readonly mock: boolean;
    /**
     * Provider to use
     */
    readonly provider: ethers.JsonRpcProvider;
    /**
     * Stored version data tree
     */
    readonly versionData: any;
    /**
     * Optional private key used for signing transactions
     */
    readonly privateKey?: string;
    /**
     * Signer to use (if privateKey provided)
     */
    readonly signer?: ethers.Wallet;
    constructor(config: AxiomSdkCoreConfig, overrides?: any);
    getConstants(): any;
    private validateTargetChainIdAndProviderUri;
    private handleProviderUri;
    private handleChainId;
    private parseProviderUri;
    private parseChainId;
    private parseVersion;
    private parseMock;
}
//# sourceMappingURL=internalConfig.d.ts.map