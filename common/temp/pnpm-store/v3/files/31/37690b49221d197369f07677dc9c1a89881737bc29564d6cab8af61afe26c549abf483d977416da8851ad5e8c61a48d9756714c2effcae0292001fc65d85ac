import { CircuitValue } from "./CircuitValue";
import { ConstantValue, RawCircuitInput } from "../shared/types";
export declare const Cell: (a: number) => CircuitValue;
/**
     * Creates a circuit variable from a number, bigint, or string.
     *
     * @param a - The raw circuit input.
     * @returns The witness cell.
     */
declare const witness: (a: RawCircuitInput) => CircuitValue;
/**
 * Creates a circuit constant from a number, bigint, or string.
 *
 * @param a - The raw circuit input.
 * @returns The constant cell.
 */
declare const constant: (a: RawCircuitInput) => CircuitValue;
/**
 * Adds two circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The sum of the two circuit values.
 */
declare const add: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Subtracts the second circuit value from the first circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The difference between the two circuit values.
 */
declare const sub: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Negates a circuit value.
 *
 * @param a - The circuit value to negate.
 * @returns The negation of the circuit value.
 */
declare const neg: (a: ConstantValue | CircuitValue) => void;
/**
 * Multiplies two circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The product of the two circuit values.
 */
declare const mul: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Multiplies two circuit values and adds a third circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @param c - The third circuit value.
 * @returns The result of multiplying the first two circuit values and adding the third circuit value.
 */
declare const mulAdd: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue, c: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Multiplies a circuit value by the negation of another circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The result of multiplying the first circuit value by the negation of the second circuit value.
 */
declare const mulNot: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Asserts that a circuit value is a bit.
 *
 * @param a - The circuit value to assert.
 */
declare const assertBit: (a: ConstantValue | CircuitValue) => void;
/**
 * Asserts that a circuit value is a constant.
 *
 * @param a - The circuit value to assert.
 * @param b - The raw circuit input.
 */
declare const assertIsConst: (a: ConstantValue | CircuitValue, b: ConstantValue) => void;
/**
 * Computes the inner product of two arrays of circuit values.
 *
 * @param a - The first array of circuit values.
 * @param b - The second array of circuit values.
 * @returns The inner product of the two arrays.
 */
declare const innerProduct: (a: (CircuitValue | ConstantValue)[], b: (CircuitValue | ConstantValue)[]) => CircuitValue;
/**
 * Computes the sum of an array of circuit values.
 *
 * @param arr - The array of circuit values.
 * @returns The sum of the array of circuit values.
 */
declare const sum: (arr: (CircuitValue | ConstantValue)[]) => CircuitValue;
/**
 * Performs a bitwise AND operation on two circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The result of the bitwise AND operation.
 */
declare const and: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Performs a bitwise OR operation on two circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The result of the bitwise OR operation.
 */
declare const or: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Performs a bitwise NOT operation on a circuit value.
 *
 * @param a - The circuit value.
 * @returns The result of the bitwise NOT operation.
 */
declare const not: (a: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Decrements a circuit value by 1.
 *
 * @param a - The circuit value.
 * @returns The decremented circuit value.
 */
declare const dec: (a: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Selects a circuit value based on a condition.
 *
 * @param a - The condition circuit value.
 * @param b - The first circuit value.
 * @param c - The second circuit value.
 * @returns The selected circuit value.
 */
declare const select: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue, c: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Performs a bitwise OR-AND operation on three circuit values.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @param c - The third circuit value.
 * @returns The result of the OR-AND operation.
 */
declare const orAnd: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue, c: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Converts an array of circuit values to an indicator array.
 *
 * @param bits - The array of circuit values.
 * @returns The indicator circuit value.
 */
declare const bitsToIndicator: (bits: (CircuitValue | ConstantValue)[]) => CircuitValue[];
/**
 * Converts an index circuit value to an indicator circuit value.
 *
 * @param idx - The index circuit value.
 * @param len - The length of the indicator circuit value.
 * @returns The indicator circuit value.
 */
declare const idxToIndicator: (idx: CircuitValue | ConstantValue, len: ConstantValue) => CircuitValue[];
/**
 * Selects circuit values from an array based on an indicator circuit value.
 *
 * @param arr - The array of circuit values.
 * @param indicator - The indicator circuit value.
 * @returns The selected circuit values.
 */
declare const selectByIndicator: (arr: (ConstantValue | CircuitValue)[], indicator: (ConstantValue | CircuitValue)[]) => CircuitValue;
/**
 * Selects a circuit value from an array based on an index circuit value.
 *
 * @param arr - The array of circuit values.
 * @param idx - The index circuit value.
 * @returns The selected circuit value.
 */
declare const selectFromIdx: (arr: (ConstantValue | CircuitValue)[], idx: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Checks if a circuit value is zero.
 *
 * @param a - The circuit value to check.
 * @returns The indicator circuit value representing whether the input is zero.
 */
declare const isZero: (a: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Checks if two circuit values are equal.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @returns The indicator circuit value representing whether the two inputs are equal.
 */
declare const isEqual: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue) => CircuitValue;
/**
 * Converts a circuit value to an array of bits.
 *
 * @param a - The circuit value to convert.
 * @param len - The length of the resulting bit array.
 * @returns The array of bits representing the input circuit value.
 */
declare const numToBits: (a: ConstantValue | CircuitValue, len: ConstantValue) => CircuitValue[];
/**
 * Asserts that two circuit values are equal.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 */
declare const checkEqual: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue) => void;
/**
 * Checks if a circuit value is within a specified range.
 *
 * @param a - The circuit value to check.
 * @param b - The range of the circuit value.
 */
declare const rangeCheck: (a: ConstantValue | CircuitValue, b: ConstantValue) => void;
/**
 * Checks if the first circuit value is less than the second circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @param c - The range of the circuit values.
 */
declare const checkLessThan: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue, c?: string) => void;
/**
 * Checks if the first circuit value is less than the second circuit value.
 *
 * @param a - The first circuit value.
 * @param b - The second circuit value.
 * @param c - The range of the circuit values.
 * @returns The indicator circuit value representing whether the first input is less than the second input.
 */
declare const isLessThan: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue, c?: string) => CircuitValue;
/**
 * Divides two circuit values and returns the quotient.
 *
 * @param a - The dividend circuit value.
 * @param b - The divisor circuit value.
 * @returns The quotient.
 *
 */
declare const div: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue, c?: string, d?: string) => CircuitValue;
/**
 * Divides two circuit values and returns the remainder.
 *
 * @param a - The dividend circuit value.
 * @param b - The divisor circuit value.
 * @returns The remainder.
 *
 */
declare const mod: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue, c?: string, d?: string) => CircuitValue;
/**
 * Raises a circuit value to the power of another circuit value.
 *
 * @param a - The base circuit value.
 * @param b - The exponent circuit value.
 * @returns The result of the exponentiation.
 */
declare const pow: (a: ConstantValue | CircuitValue, b: ConstantValue | CircuitValue, c?: string) => CircuitValue;
/**
 * Computes the Poseidon hash of multiple circuit values.
 *
 * @param args - The circuit values to hash.
 * @returns The hash value.
 */
declare const poseidon: (...args: (CircuitValue | ConstantValue)[]) => CircuitValue;
/**
 * Retrieves the value of a circuit value.
 *
 * @param a - The circuit value.
 * @returns The value of the circuit value.
 */
declare const value: (a: CircuitValue) => string;
/**
 * Logs the provided *circuit* values to the console. Use `console.log` for normal logging.
 *
 * @param args - The values to log (can be `CircuitValue`s or `CircuitValue256`s).
 */
declare const log: (...args: any) => void;
/**
 * Makes a circuit value public.
 *
 * @param a - The circuit value to make public.
 */
declare const makePublic: (a: CircuitValue | ConstantValue) => void;
export { witness, constant, add, sub, neg, mul, mulAdd, mulNot, assertBit, assertIsConst, innerProduct, sum, and, or, not, dec, select, orAnd, bitsToIndicator, idxToIndicator, selectByIndicator, selectFromIdx, isZero, isEqual, numToBits, checkEqual, rangeCheck, checkLessThan, isLessThan, div, mod, pow, poseidon, value, log, makePublic };
