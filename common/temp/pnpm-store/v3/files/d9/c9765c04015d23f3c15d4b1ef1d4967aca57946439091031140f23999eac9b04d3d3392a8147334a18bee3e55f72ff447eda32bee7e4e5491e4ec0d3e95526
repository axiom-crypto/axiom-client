"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CircuitValue = void 0;
const CircuitValue256_1 = require("./CircuitValue256");
class CircuitValue {
    constructor({ value, cell }) {
        //@ts-ignore
        this._circuit = globalThis.circuit.halo2lib;
        if (value !== undefined) {
            this._value = BigInt(value);
            this._cell = this._circuit.constant(value.toString());
        }
        else if (cell !== undefined) {
            this._cell = cell;
            const val = BigInt(this._circuit.value(cell));
            this._value = val;
        }
        else {
            throw new Error("Invalid input");
        }
    }
    cell() {
        return this._cell;
    }
    value() {
        return this._value;
    }
    number() {
        return Number(this._value);
    }
    address() {
        return "0x" + this._value.toString(16).padStart(40, "0");
    }
    toCircuitValue256() {
        const b = 2n ** 128n;
        const lookupBits = this._circuit.lookup_bits();
        let paddedNumBits = Math.floor(253 / lookupBits) * lookupBits - 1;
        const [hi, lo] = this._circuit.div_mod(this._cell, b.toString(), paddedNumBits.toString());
        const hi128CircuitValue = new CircuitValue({ cell: hi });
        const lo128CircuitValue = new CircuitValue({ cell: lo });
        const halo2LibValue256 = new CircuitValue256_1.CircuitValue256({
            hi: hi128CircuitValue,
            lo: lo128CircuitValue,
        });
        return halo2LibValue256;
    }
}
exports.CircuitValue = CircuitValue;
