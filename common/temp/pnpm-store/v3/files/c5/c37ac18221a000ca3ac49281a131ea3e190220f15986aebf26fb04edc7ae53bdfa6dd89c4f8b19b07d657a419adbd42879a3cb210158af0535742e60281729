"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalConfig = void 0;
const ethers_1 = require("ethers");
const constants_1 = require("../shared/constants");
class InternalConfig {
    constructor(config, overrides) {
        this.apiKey = config.apiKey ?? "no-api-key";
        this.validateTargetChainIdAndProviderUri(config);
        config = this.handleProviderUri(config);
        this.providerUri = this.parseProviderUri(config.providerUri);
        this.targetProviderUri = this.parseProviderUri(config.targetProviderUri ?? "");
        config = this.handleChainId(config);
        this.chainId = this.parseChainId(config.chainId);
        this.targetChainId = this.parseChainId(config.targetChainId);
        this.version = this.parseVersion(config.version);
        this.timeoutMs = config.timeoutMs ?? 10000;
        this.mock = this.parseMock(config.mock, this.chainId);
        this.provider = new ethers_1.ethers.JsonRpcProvider(this.providerUri);
        if (config.privateKey !== undefined && config.privateKey !== "") {
            this.signer = new ethers_1.ethers.Wallet(config.privateKey, this.provider);
        }
    }
    getConstants() {
        return this.versionData[this.version];
    }
    validateTargetChainIdAndProviderUri(config) {
        // If targetChainId is set, targetProviderUri must also be set, and vice versa
        if (config.targetChainId !== undefined && config.targetProviderUri === undefined) {
            throw new Error("`targetProviderUri` is required when `targetChainId` is set");
        }
        if (config.targetChainId === undefined && config.targetProviderUri !== undefined) {
            throw new Error("`targetChainId` is required when `targetProviderUri` is set");
        }
    }
    handleProviderUri(config) {
        if (config.providerUri === undefined || config.providerUri === "") {
            throw new Error("`providerUri` is required in AxiomSdkCoreConfig");
        }
        if (config.targetProviderUri === undefined || config.targetProviderUri === "") {
            config.targetProviderUri = config.providerUri;
        }
        return config;
    }
    handleChainId(config) {
        if (config.chainId === undefined) {
            config.chainId = 1;
        }
        if (config.targetChainId === undefined) {
            config.targetChainId = config.chainId;
        }
        return config;
    }
    parseProviderUri(providerUri) {
        if (providerUri.startsWith("http://") ||
            providerUri.startsWith("https://")) {
            return providerUri;
        }
        else if (providerUri.startsWith("wss://")) {
            throw new Error("Websockets is not yet supported");
        }
        else {
            throw new Error("Invalid provider URI: URI must start with http://, https://, or wss://");
        }
    }
    parseChainId(chainId) {
        if (chainId === undefined) {
            return BigInt(1);
        }
        return BigInt(chainId.valueOf());
    }
    parseVersion(version) {
        if (version === undefined) {
            return constants_1.Versions[constants_1.Versions.length - 1];
        }
        let parsedVersion = version.toLowerCase();
        if (!parsedVersion.startsWith("v")) {
            parsedVersion = `v${parsedVersion}`;
        }
        parsedVersion = parsedVersion.replace(/\./g, "_");
        if (constants_1.Versions.includes(parsedVersion)) {
            return parsedVersion;
        }
        throw new Error("Invalid version number. Valid versions are: " + constants_1.Versions.join(", "));
    }
    parseMock(mock, chainId) {
        if (mock === undefined) {
            return false;
        }
        if (chainId === 1n) {
            return false;
        }
        return mock;
    }
}
exports.InternalConfig = InternalConfig;
//# sourceMappingURL=internalConfig.js.map