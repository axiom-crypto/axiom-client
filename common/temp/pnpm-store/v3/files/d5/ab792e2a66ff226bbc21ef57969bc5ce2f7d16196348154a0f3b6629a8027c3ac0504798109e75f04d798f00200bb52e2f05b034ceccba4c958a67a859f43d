"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uppercase = exports.lowercase = exports.createInterfaceFromInputs = exports.getInputFunctionSignature = exports.convertBase64ToUint8Arr = exports.convertRawInput = exports.joinArrays = void 0;
const joinArrays = (...args) => {
    const result = [];
    for (const arg of args) {
        if (Array.isArray(arg)) {
            result.push(...arg);
        }
        else {
            result.push(arg);
        }
    }
    return result;
};
exports.joinArrays = joinArrays;
const convertRawInput = (input) => {
    if (typeof input === "string") {
        return BigInt(input).toString();
    }
    else if (Array.isArray(input)) {
        return input.map(exports.convertRawInput);
    }
    else if (typeof input === "number") {
        return input.toString();
    }
    else if (typeof input === 'bigint') {
        return input.toString();
    }
};
exports.convertRawInput = convertRawInput;
const convertBase64ToUint8Arr = (b64str) => {
    const binstr = atob(b64str);
    const buf = new Uint8Array(binstr.length);
    Array.prototype.forEach.call(binstr, (ch, i) => {
        buf[i] = ch.charCodeAt(0);
    });
    return buf;
};
exports.convertBase64ToUint8Arr = convertBase64ToUint8Arr;
const getInputFunctionSignature = (inputs) => {
    const parsedInputs = JSON.parse(inputs);
    let newCode = "";
    for (const key of Object.keys(parsedInputs)) {
        newCode += `${key},`;
    }
    ;
    newCode = newCode.slice(0, -1);
    return newCode;
};
exports.getInputFunctionSignature = getInputFunctionSignature;
const createInterfaceFromInputs = (inputs) => {
    const json = JSON.parse(inputs);
    let tsInterface = 'export interface CircuitInputs {\n';
    for (const key in json) {
        tsInterface += `  ${key}: ${typeof json[key]};\n`;
    }
    tsInterface += '}\n';
    return tsInterface;
};
exports.createInterfaceFromInputs = createInterfaceFromInputs;
const lowercase = (str) => {
    return str.charAt(0).toLowerCase() + str.slice(1);
};
exports.lowercase = lowercase;
const uppercase = (str) => {
    return str.charAt(0).toUpperCase() + str.slice(1);
};
exports.uppercase = uppercase;
